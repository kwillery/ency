<!doctype linuxdoc system>
<article>
<title>Star Trek Encyclopedia reader API
<author>Robert Mibus, <tt/mibus@bigpond.com/
<abstract>
This document explains the libency API
</abstract>

<toc>



<sect>Introduction
<p>
The 'ency' library currently supports five encyclopedias
<itemize>
<item>The original Omnipedia</item>
<item>The updated Omnipedia</item>
<item>The Star Trek Encyclopedia</item>
<item>The TNG Episode Guide</item>
<item>The DS9 Episode Guide</item>
<item>The Star Trek Encyclopedia v3.0</item>
</itemize>

</sect>



<sect>Defines &amp; enums


<sect1>ST_FILE_*<label id="ST_FILE_*">
<p>
These are the different file types ency supports.
<verb>
#define ST_FILE_TYPES st_count_filetypes()
#define ST_FILE_CURR -1
</verb>
<p>
TYPES is how many types there are, 0 to (TYPES-1). This calls st_count_filetypes(), you can use either. (It exists primarily for compatibility.
<p>
CURR is the last one loaded/used, and is only used with <tt/<ref id="st_fileinfo_get_name" name="st_fileinfo_get_name()"> /
<p>
There are two more encyclopediae that I know of, the TNG and DS9 'Companions', both of which include scripts (apparently). Until I get a copy of these two, I can't support them. If someone is willing to let me borrow/buy/steal them, or doesn't mind testing ency pre-releases, please get in touch! 

<sect1>ST_SECT_*<label id="ST_SECT_*">
<p>
These are the different sections of each encyclopedia.
<verb>
#define ST_SECT_ENCY 0
#define ST_SECT_EPIS 1
#define ST_SECT_CHRO 2
#define ST_SECT_EPIS_SORTED 4
</verb>
<p>
<tt/ENCY/ is the Encyclopedia section, <tt/EPIS/ is the Episode section, and <tt/CHRO/ is the Chronology (timeline) section. <tt/EPIS_SORTED/ is the numerical (as opposed to alphabetical) listing of episodes. Using <tt/EPIS_SORTED/ is equivalent to using <tt/<ref id="ST_OPT_*" name="ST_OPT_SORTEPIS">/ and <tt/ST_SECT_EPIS/.
<p>
Used with <tt/<ref id="st_find" name="st_find()">/.
<sect1>ST_OPT_*<label id="ST_OPT_*">
<p>
These are options passed to <tt/<ref id="st_find" name="st_find()">/.
<verb>
#define ST_OPT_CASE_SENSITIVE 1
#define ST_OPT_RETURN_BODY 2
#define ST_OPT_MATCH_SUBSTRING 4
#define ST_OPT_NO_FMT 8
#define ST_OPT_SORTEPIS 16
#define ST_OPT_FT 32
#define ST_OPT_NO_FILEPOS 64
</verb>
<p>
<tt/CASE_SENSITIVE/ is whether the search is case-sensitive or not. (default: no)
<tt/RETURN_BODY/ determines whether the <tt/fmt/ and <tt/text/ parts of an <tt/<ref id="ency_titles" name="ency_titles">/ struct are returned. (default: no). If they are not returned, <tt/<ref id="st_get_title_at" name="st_get_title_at()">/ can be used to retrieve the full entry.
<tt/MATCH_SUBSTRING/ determines whether <tt/<ref id="st_find" name="st_find()">/ will match substrings or not. (default: no)
<tt/NO_FMT/ means that the -&gt;fmt part of an <tt/<ref id="ency_titles" name="ency_titles">/ struct are returned from <tt/<ref id="st_read_title_at" name="st_read_title_at()">/.
<tt/SORTEPIS/ is only valid when using <tt/<ref id="ST_SECT_*" name="ST_SECT_EPIS">/, and provides the same behaviour as using <tt/<ref id="ST_SECT_*" name="ST_SECT_EPIS_SORTED">/, that is to have episodes listed in numerical (as opposed to alphabetical) order.
<tt/FT/ makes <tt/<ref id="st_find" name="st_find()">/ perform a full-text search. N.B. that returns from this are scored and use <tt/<ref id="ency_titles" name="ency_titles">/'s -&gt;score.
<tt/NO_FILEPOS/ is used with <tt/<ref id="st_find" name="st_find()">/ so that it does not return the position in a file of the entry.
<p>
<tt/RETURN_BODY/, <tt/NO_FMT/, and <tt/NO_FILEPOS/ can be used to speed up searches quite effectively.
<p>
For more information on how to use these, see the <tt/<ref id="st_find" name="st_find()">/ section.

<sect1>media_type<label id="media_type">
<p>
<verb>
typedef enum
{
        picture,
        video,
        audio,
        swf
} media_type;
</verb>
<p>
These are used with <tt/<ref id="st_format_filename" name="st_format_filename()">/.

<sect>Struct Types

<sect1>st_ency_formatting<label id="st_ency_formatting">
<p>
<verb>
struct st_ency_formatting
{
	int firstword;
	int words;
	int bold;
	int italic;
	int underline;
	struct st_ency_formatting *next;
};
</verb>
Returned as part of an <tt/<ref id="ency_titles" name="ency_titles">/ struct.
<p>
<tt/firstword/ is the number of words into an entry the formatting starts (including the title)
<tt/words/ is how long the formatting goes for
<tt/bold/, <tt/italic/, and <tt/underline/ control what formatting is to be applied.
More than one can be on, eg Bold & Italic.
<p>
<tt/next/ is the next piece of formatting information in the list.


<sect1>ency_titles<label id="ency_titles">
<p>
This holds information about each entry
<verb>
struct ency_titles
{
	char *name;
	char *title;
	char *text;
	struct st_ency_formatting *fmt;
	struct ency_titles *next;
	long filepos;
	float score;
};
</verb>
</p><p>
<tt/name/ is the entry's actual title.
<tt/title/ is the entry's title that is written as part of the entry.
<tt/text/ is the entry's text (body).
<tt/fmt/ is the entry's formatting information. (see <tt/<ref id="st_ency_formatting" name="st_ency_formatting">/)
<tt/next/ leads to the next returned entry (<tt/NULL/ if this is the last one).
<tt/filepos/ is the # of bytes into the data file the information starts. (see <tt/<ref id="st_get_title_at" name="st_get_title_at">/). It should be free'd with one of the <tt/<ref id="st_free_entry*" name="st_free_entry">/ functions.
<tt/score/ is used when doing fulltext searches. (See <tt/<ref id="st_find" name="st_find()">/ and <tt/<ref id="ST_OPT_*" name="ST_OPT_FT">/. It is a number out of 100, but is *not* a percentage. (Well...).
<p>
The difference between <tt/name/ and <tt/title/ may be hard to understand; <tt/name/ is what the 'official' software puts in the listbox at the top of the screen. <tt/title/ is the first piece of bold text to be placed in the text box at the bottom. (Also, -&gt;name changes when <tt/<ref id="ST_OPT_*" name="ST_OPT_SORTEPIS">/ is used, whereas <tt/title/ never does.
</p>
</sect1>

<sect1>st_photo<label id="st_photo">
<p>
<verb>
struct st_photo {
  char file[8];
  char caption[50];
};
</verb>
</p><p>
This struct is returned in <tt/<ref id="st_media" name="st_media">/ structs (see <tt/<ref id="st_get_media" name="st_get_media">/)
<tt/file/ is the first 7 characters of the filename of the photo (or now, video, sound, or swf) is being referred to.
<tt/file/ should be processed by <tt/<ref id="st_format_filename" name="st_format_filename">/ to get a usable filename. For pictures and swfs, it is often possible to call <tt/<ref id="st_get_thumbnail" name="st_get_thumbnail"/ to get a 60x40 (usually) thumbnail picture.
</p>

<sect1>st_media<label id="st_media">

<p>
Returned by <tt/<ref id="st_get_media" name="st_get_media">/.
<verb>
struct st_media {
  struct st_photo photos[6];
  struct st_photo video;
  struct st_photo audio;
  struct st_photo swf;
};
</verb>
<p>
There are six <tt/<ref id="st_photo" name="st_photo">/ structs in <tt/photos/. The <tt/video/, <tt/audio/, and <tt/swf/ structs are the same, but holds the video, audio, and 'flash' references instead.

<sect>Functions


<sect1>st_init<label id="st_init">
<p>
<verb>
int st_init (void);
</verb>
<tt/st_init/ should usually be the first <tt/ency/ function run in programs, as it initialises important parts of the library.


<sect1>st_finish<label id="st_finish">
<p>
<verb>
int st_finish (void);
</verb>
<tt/st_finish/ should be the last <tt/ency/ function run. It deinitialises the library, and free's memory used by it.


<sect1>st_open_ency<label id="st_open_ency">
<p>
<verb>
int st_open_ency (char *directory);
</verb>
This function sets the directory for the encyclopedia which is to be opened.
<p>
If the filename is not set using this function, ency will check at startup for an environment variable called <tt/ENCY_DIR/ and also check the current directory for encyclopedia files.
It returns the encyclopedia version (0 to ST_FILE_TYPES-1) if the open was succesful, else ST_FILE_UNKNOWN.

<sect1>st_get_directory<label id="st_get_directory">
<p>
<verb>
char *st_get_directory (void);
</verb>
Returns the currently stored directory name.
<p><em/NOTE/: Do <em/not/ free the returned pointer.

<sect1>st_load_all<label id="st_load_all">
<p>
<verb>
void st_load_all (void);
</verb>
<tt/st_load_all()/ loads internal parts of the encyclopedia for faster access. This is only useful if you want the first search to be fast, data is loaded whenever it is needed by default.
</sect1>

<sect1>st_count_filetypes<label id="st_count_filetypes">
<p>
<verb>
int st_count_filetypes (void);
</verb>
<tt/st_count_filetypes()/ returns the number of known encyclopedia versions. (The versions are then numbered 0 to st_count_filetypes()-1).
</sect1>

<sect1>st_fileinfo_get_name<label id="st_fileinfo_get_name">
<p>
<verb>
char *st_fileinfo_get_name (int filetype);
</verb>
This returns a descriptive string for a given encyclopedia's name.
Use either <tt/0/ to <tt/<ref id="st_count_filetypes" name="st_count_filetypes()">/-1, or <tt/<ref id="ST_FILE_*" name="ST_FILE_CURR">/.

<sect1>rc files<label id="rc files">
<p>
<verb>
int st_load_rc_file (char *);
void st_unload_data(void);
</verb></p>
<p>
<tt/st_load_rc_file()/ loads a specified rc file for use by libency. Any encyclopedia definitions in it will be added to any lists already loaded, with preference given to file(s) loaded earlier. <tt/st_unload_data()/ clears this internal list. (I recommend <em/*against*/ giving it files it won't understand :-). By default, libency will try to load encyfiles.rc from these locations:
<itemize>
<item>Where the environment variable <tt/ENCY_RC_FILENAME/ points</item>
<item><tt>$HOME/.ency/encyfiles.rc</tt></item>
<item><tt>$HOME/.encyfiles.rc</tt></item>
<item><tt>./encyfiles.rc</tt></item>
<item><tt>/etc/encyfiles.rc</tt></item>
<item><tt>/usr/local/etc/encyfiles.rc</tt></item>
<item><tt>/usr/share/ency/encyfiles.rc</tt></item>
<item><tt>/usr/local/share/ency/encyfiles.rc</tt></item>
</itemize>
</p>
<p>
<em>Note that <tt/st_load_rc_file()/ needs to be run before <tt/st_init()/ if you want a custom rc file, unless of course you run <tt/st_unload_data()/ first.</em>
</sect1>

<sect1>st_find<label id="st_find">
<p>
This is the preferred method for doing a search.
<verb>
struct ency_titles *st_find (char *search_string, int section, int options)
</verb>
<p>
<tt/search_string/ is the string to search for. <tt/section/ is the <tt/<ref id="ST_SECT_*" name="ST_SECT_*">/ define. <tt/options/ come from the <tt/<ref id="ST_OPT_*" name="ST_OPT_*">/ defines.
<p>
Example usage:
<verb>
 results = st_find ("Kirk", ST_SECT_ENCY, ST_OPT_MATCH_SUBSTRING | ST_OPT_RETURN_BODY);
</verb>
<p>
Only one section can be specified, but multiple options can be used with the '|' (bitwise "OR") symbol. It returns linked list of <tt/<ref id="ency_titles" name="ency_titles">/ structs, which should be free'd with one of the <tt/<ref id="st_free_entry*" name="st_free_entry">/ functions.
<p>

<sect1>st_read_title_at<label id="st_read_title_at">
<p>
<verb>
struct ency_titles *st_read_title_at (long filepos, int options);
</verb>
<p>
<tt/st_read_title_at()/ returns a single entry at the position indicated by filepos in the current encyclopedia's main data file. The <tt/<ref id="ST_OPT_*" name="ST_OPT">/ options that affect it are:
<itemize>
		<item>ST_OPT_NO_FMT</item>
		<item>ST_OPT_RETURN_BODY</item>
</itemize>

<sect1>st_get_title_at<label id="st_get_title_at">
<p>
<verb>
struct ency_titles *st_get_title_at (long filepos);
</verb>
</p>
<p>
This function returns an <tt/<ref id="ency_titles" name="ency_titles">/ struct of an entry at a certain byte position in the file. The position is returned with most <tt/<ref id="st_find" name="st_find()">/ searches.</p><p><em/Note:/ This currently calls <tt/<ref id="st_read_title_at" name="st_read_title_at()">/ with ST_OPT_RETURN_BODY for an option.</p>

<sect1>st_load_media<label id="st_load_media">
<p>
<verb>
int st_load_media (void);
</verb>
This tells 'ency' to load the media lookup tables. It should be run once per file. <tt/<ref id="st_get_media" name="st_get_media">/ can then be used.
If you want to load another file later (to change encyclopedias), run <tt/<ref id="st_unload_media" name="st_unload_media()">/ first.

<sect1>st_loaded_media<label id="st_loaded_media">
<p>
<verb>
int st_loaded_media (void)
</verb>
This checks to see if the media lookup tables are loaded - 1 is returned if they are, else 0. (<em/NOTE/: This function does not check to see if the media entries relate to the current file)


<sect1>st_unload_media<label id="st_unload_media">
<p>
<verb>
int st_unload_media (void)
</verb>
This function unloads the media lookup tables loaded by <tt/<ref id="st_load_media" name="st_load_media">/


<sect1>st_get_media<label id="st_get_media">
<p>
<verb>
struct st_media *st_get_media (char *search_string);
</verb>
This function is for matching titles of entries with media (photos, videos). <tt/search_string/ is matched exactly against a list of all media (loaded by <tt/<ref id="st_load_media" name="st_load_media">/)
It returns an <tt/<ref id="st_media" name="st_media">/ struct if a match is found, else <tt/NULL/


<sect1>st_format_filename<label id="st_format_filename">
<p>
<verb>
char *st_format_filename (char *fnbasen, char *base_path, media_type media)
</verb>
This function converts a 6-letter filename to a full filename. <tt/fnbasen/ is the <tt/file/ section from the <tt/<ref id="st_photo" name="st_photo">/ structs in an <tt/<ref id="st_media" name="st_media">/ struct.
<tt/base_path/ is where the media is located (eg. "/cdrom").
<tt/media/ is from the <tt/<ref id="media_type" name="media_type">/ enum, and should be set depending on what part of an <tt/<ref id="st_media" name="st_media">/ is being passed.

<sect1>st_get_thumbnail<label id="st_get_thumbnail">
<p>
<verb>
int st_get_thumbnail(char *name, char *file);
</verb>
This function takes the 6-character 'fnbasen' part of a filename for a picture or swf and a filename, and writes a decompressed ASCII PPM file. <tt/name/ is the fnbasen (e.g. 'KirksT1'), <tt/file/ is where to write it. If succesful, <tt/st_get_thumbnail()/ returns 0. If an error occurs (the thumbnail doesn't exist or libency can't write to the file), a non-0 int is returned.

<sect1>st_free_entry*<label id="st_free_entry*">
<p>
These functions are used to free structs
<verb>
int st_free_entry (struct ency_titles *);
int st_free_entry_tree (struct ency_titles *);
int st_free_entry_and_advance (struct ency_titles **);
</verb>
<tt/st_free_entry/ frees a single <tt/<ref id="ency_titles" name="ency_titles">/ struct. <tt/st_free_entry_tree/ does that, but also removes all after it (referenced by the '->next'). <tt/st_free_entry_and_advance/ frees a single entry, then progresses to the next. (note the **, this means you will probably need a '&amp;' before the argument).

<sect>Example Implementation
<p>
Compile the following program as such:
  <tt/gcc -o test test.c libency.a/
(assuming you have the ency source in this directory, and have called this program 'test.c')
or (more likely)
  <tt/gcc -o test test.c -lency/
(assuming you have libency.a in /usr/lib, ency.h in /usr/include, and have named this program test.c, yada yada yada - your options may vary.)
<p>
<verb>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "ency.h"

int main (int argc, char *argv[])
{
  int i = 0;
  char search_string[70];
  char *temp_fn = NULL;
  struct ency_titles *thingy = NULL;
  struct ency_titles *kill_me = NULL;
  struct st_ency_formatting *fmt = NULL, *kill_fmt = NULL;
  struct st_media *media = NULL;
  char base_path[] = "/cdrom";
  int options = ST_OPT_MATCH_SUBSTRING | ST_OPT_RETURN_BODY;
  printf ("Enter search string :");
  scanf ("%[a-zA-Z0-9.\"\'() -]", search_string);

  /* run any ency init stuff */
  if (!st_init ())
  {
    printf ("Error opening data file.\n");
    exit (1);
  }

  /* tell ency to load the media lookup tables */
  st_load_media ();

    thingy = st_find (search_string, ST_SECT_ENCY, options);

  if ((thingy != NULL) && (thingy->title != NULL)) {
    do {
      /* print the returned text */
      printf ("\n--<%s>--\n%s\n%s\n\n", thingy->name, thingy->title, thingy->text);
      media = st_get_media(thingy->title);

      if (media)
      {
        printf ("Associated media:\n");
        for (i = 0; i < 6; i++)
          if (strlen (media->photos[i].file)) {   /* if there is photos #i */
            temp_fn = st_format_filename (media->photos[i].file, base_path, picture);
            printf ("%s: %s\n", temp_fn, media->photos[i].caption);
            free (temp_fn);
          }
        if (strlen(media->video.file)) {   /* if there is a video */
          temp_fn = st_format_filename (media->video.file, base_path, video);
          printf ("%s: %s\n", temp_fn, media->video.caption);
          free (temp_fn);
        }
        if (strlen(media->audio.file)) {
          temp_fn = st_format_filename (media->video.file, base_path, audio);    
          printf ("%s: %s\n", temp_fn, media->video.caption);
          free (temp_fn);
        }
        if (strlen(media->swf.file)) {
          temp_fn = st_format_filename (media->video.file, base_path, swf);
          printf ("%s: %s\n", temp_fn, media->video.caption);
          free (temp_fn);
        }
        free (media); media = NULL; /* free the returned media struct */
      }

      /* free the returned stuff */
      st_free_entry_and_advance (&amp;thingy);

    }
    while (thingy != NULL);
  } else
    printf ("No matches\n");

  st_finish ();
  return (0);
}
</verb>
</article>
