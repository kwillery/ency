--------
ency API
--------
(rough draft)

----------------
global variables
----------------

extern char *ency_filename;
 sets the Data.cxt filename explicitly (eg "/dose/ency98/Data.cxt")

extern int st_ignore_case;
 sets for most functions to ignore case when searching

extern int st_return_body;
 sets whether a function returns formatting & text. (in applicable functions that is :-)

extern int st_file_type;
 sets the file type (ST_FILE_* definitions)

-----------
definitions
-----------
#define ST_FILE_ENCY98 0
#define ST_FILE_OMNI1 1
#define ST_FILE_OMNI2 2
#define ST_FILE_TNG1 3
#define ST_FILE_DS91 4

ENCY98 is the default, the 1998 version
OMNI1 is the original CD based Omnipedia
OMNI2 is the second CD Omnipedia (Upto the ST:Generations movie)
TNG1 is the TNG Episode guide
DS91 is the DS9 episode guide

----------
structures
----------

struct st_table
  {
    char *title;
    char *fnbase;
    struct st_table *next;
  };
a simple linked list, with titles (title) and filename base (eg /cdrom/video98/a/%fnbase%*.mov if fnbase started with an 'a'. see the notes at the end...)

struct st_caption
  {
    char *fnbasen;
    char *caption;
    struct st_caption *next;
  };
another simple linked list, for picture captions.
fnbasen: the fnbase from the tables (see 'struct st_table' && st_get_table), pluse a number from 1 to 5 on the end.
caption: the picture's caption
next: the next in the list.

struct st_ency_formatting
  {
    int bi;
    int words;
    int firstword;
    struct st_ency_formatting *next;
  };
too hard to explain for now. :)

struct ency_titles
  {
    char *title;
    char *text;
    struct st_ency_formatting *fmt;
    struct ency_titles *next;
    int err;
    long filepos;
  };
title = the title of an entry
text = the body of the entry
fmt = formatting info
next = the next returned entry
err = the error code (see the st_nice_error function)
filepos = position in Data.cxt of info; use get_title_at() to retrieve the info.
(eg. have (st_return_body = 0), build list using ency_find_list(), and get_title_at() to get data when clicked/selected)

---------
functions
---------

struct ency_titles *ency_find_list (char title[], int exact)
returns - struct containing encyclopedia titles & text
title: a string to search for.
exact: 0 = match a substring
       1 = match *full* string only
       2 = return *every* entry, ie ignore search string
st_ignore_case = global variable
st_return_body = global variable
(same for epis_find_list & chro_find_list)

struct st_table *st_get_table (void)
returns a list of all encyclopedia (ency,epis, and chro) titles, and file name base. (eg /cdrom/video98/a/%fnbase%*.mov if fnbase started with an 'a'. email me for a better explanation)

struct st_caption *st_get_captions(void)
returns a linked list relating the fnbase, a number from 1 to 5, and a picture caption.

struct ency_titles *get_title_at (long filepos)
returns title & text of entry at file position filepos
use filepos variable returned with the ency_titles structure.

char *st_nice_error (int error_no)
pass along the 'err' value returned with the *_find_list functions.
it returns a text version of the error message (ie for a dialog box etc...)

int st_fingerprint (void)
returns a value for the st_file_type variable, or > ST_FILE_TYPES for an error.
use code like...

  st_file_type = st_fingerprint ();
  if (st_file_type <= ST_FILE_TYPES)
    {
    /* do your stuff... */
    }

--------
EXAMPLES
--------
/* ******************************* Example 1 ******************************* */
/* I dont know how many of these are needed... */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ency.h"
/* ... but they're there just to be safe :) */

extern int st_ignore_case;
extern int st_file_type;
extern char *ency_filename;

int main() {
struct ency_titles *search_result = NULL;
char search_string[5] = "kirk";

ency_filename = (char *) malloc (60);
strcpy (ency_filename, "/dose/trek/Reference/Encyclopedia/Ency98/Data.cxt");
st_file_type = ST_FILE_ENCY98;
search_result = ency_find_list (search_string, 0);

if ((thingy != NULL) && (thingy->title != NULL))
{
 do
 {
  printf ("\n%s\n\n%s\n\n", thingy->title, thingy->text);
  kill_me = thingy;
  thingy = thingy->next;
  free (kill_me);
 }
 while (thingy != NULL);
}
else
 printf ("No matches\n");
}
/* ***************************** End Example 1 ***************************** */

-----
NOTES
-----
1) The *_get_title and *_find_titles functions no longer work.

2) These are explanatory emails between me & the gnometrek author...

re: fnbase & st_table stuff
---
> btw, it says in README.API:
> "a simple linked list, with titles (title) and filename base (eg
> /cdrom/video98/a/%fnbase%*.mov if fnbase started with an 'a'. email me for
> a better explanation)"
> so this is me emailing for a better explanation... :)

/* declare a var. */ // main() etc. omitted.
  struct st_table *tbl, *oldtbl;

  printf ("Enter search string :");
  scanf ("%[a-zA-Z0-9.\"\'() -]", search_string);

/* this much should be clear... */

  tbl = st_get_table (); // retrieves the lookup table.
  while (tbl)                   /* while the table isnt null (exists! :)
*/
    {
      strcpy (title, tbl->title);       /* copy the _real_ title to a
local variable */
      if (strstr (title, search_string))        /* check for the search
string  */
        {
          printf ("/cdrom/video98/%c/%s1q.mov\n", tbl->fnbase[0],
tbl->fnbase);
        }
      oldtbl = tbl;             /* store tbl's memory address in oldtbl
*/
      tbl = tbl->next;          /* progress tbl along the list */
      free (oldtbl->title);     /* free the last entry's title */
      free (oldtbl->fnbase);    /* free the last fnbase */
      free (oldtbl);            /* free the last entry */
    }
 /* end */

so for example, i run this,
type in 'wormhole', and get

/cdrom/video98/a/artleq1q.mov
/cdrom/video98/b/bajole1q.mov
/cdrom/video98/b/barzle1q.mov
/cdrom/video98/m/micleb1q.mov
/cdrom/video98/w/worman1q.mov
/cdrom/video98/w/wormle1q.mov
/cdrom/video98/w/wornsb1q.mov

printed.

they are in the form of video98/b/bajole[0-9][a-z].* in sh-speak. (* is
either mov or pic as far as im aware.)
(b is the 1st letter of bajole)
(bajole is the fnbase equivalent of 'Bajoran Wormhole')
the [a-z] is a 'q' if its a movie, or an 'r' if it is a pic.
---

---------
Robert Mibus
beemer@picknowl.com.au
http://mibus.cjb.net
---------
